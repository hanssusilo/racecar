// Generated by gencpp from file racecar/wd.msg
// DO NOT EDIT!


#ifndef RACECAR_MESSAGE_WD_H
#define RACECAR_MESSAGE_WD_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace racecar
{
template <class ContainerAllocator>
struct wd_
{
  typedef wd_<ContainerAllocator> Type;

  wd_()
    : a_r(0.0)
    , b_r(0.0)
    , a_l(0.0)
    , b_l(0.0)  {
    }
  wd_(const ContainerAllocator& _alloc)
    : a_r(0.0)
    , b_r(0.0)
    , a_l(0.0)
    , b_l(0.0)  {
    }



   typedef float _a_r_type;
  _a_r_type a_r;

   typedef float _b_r_type;
  _b_r_type b_r;

   typedef float _a_l_type;
  _a_l_type a_l;

   typedef float _b_l_type;
  _b_l_type b_l;




  typedef boost::shared_ptr< ::racecar::wd_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::racecar::wd_<ContainerAllocator> const> ConstPtr;

}; // struct wd_

typedef ::racecar::wd_<std::allocator<void> > wd;

typedef boost::shared_ptr< ::racecar::wd > wdPtr;
typedef boost::shared_ptr< ::racecar::wd const> wdConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::racecar::wd_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::racecar::wd_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace racecar

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'racecar': ['/home/racecar/racecar/src/racecar-iap/racecar/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::racecar::wd_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::racecar::wd_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::racecar::wd_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::racecar::wd_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::racecar::wd_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::racecar::wd_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::racecar::wd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0eceb51e340e9bf10c7c57a66c32a9c6";
  }

  static const char* value(const ::racecar::wd_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0eceb51e340e9bf1ULL;
  static const uint64_t static_value2 = 0x0c7c57a66c32a9c6ULL;
};

template<class ContainerAllocator>
struct DataType< ::racecar::wd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "racecar/wd";
  }

  static const char* value(const ::racecar::wd_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::racecar::wd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Lines describing the walls\n\
# Right wall: a_r*x + b_r\n\
# Left wall: a_l*x + b_l\n\
\n\
float32 a_r\n\
float32 b_r\n\
float32 a_l\n\
float32 b_l\n\
";
  }

  static const char* value(const ::racecar::wd_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::racecar::wd_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.a_r);
      stream.next(m.b_r);
      stream.next(m.a_l);
      stream.next(m.b_l);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct wd_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::racecar::wd_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::racecar::wd_<ContainerAllocator>& v)
  {
    s << indent << "a_r: ";
    Printer<float>::stream(s, indent + "  ", v.a_r);
    s << indent << "b_r: ";
    Printer<float>::stream(s, indent + "  ", v.b_r);
    s << indent << "a_l: ";
    Printer<float>::stream(s, indent + "  ", v.a_l);
    s << indent << "b_l: ";
    Printer<float>::stream(s, indent + "  ", v.b_l);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RACECAR_MESSAGE_WD_H
